{"version":3,"sources":["../../../../src/database/repositories/customer.repository.js"],"names":["addCustomer","customer","create","updateCustomer","customerId","customerUpdate","Promise","resolve","reject","findOneAndUpdate","id","upsert","new","err","obj","console","log","changePassword","currentPassword","newPassword","CustomerRepository","findCustomerById","then","Crypto","isMatch","password","match","encrypt","user","value","save","catch","addCustomerCredit","credit","credits","push","editCustomerCredit","creditUpdate","update","_id","$set","removeCustomer","remove","findOne","populate","findCustomerByObjectId","findCustomerByEmail","email","removeClubByClubId","clubId","clubs","filter","club","changePrivateInfo","custId","index","newItem","addCreditOrReceipt","item","prop","exists","findCreditOrReceipt","removeCreditOrReceipt","creditId","getIndexOfCreditOrReceipt","splice","find","i","forEach","changeCreditOrReceiptInfo","itemIndex","addItemCreditOrReceipt","items","changeItemsCreditOrReceipt","oldItem","indexOf","Credits","removeItemsCreditOrReceipt"],"mappings":"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","file":"customer.repository.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport CustomerModel from '../../models/user-model';\r\n\r\nexport default {\r\n\r\n    addCustomer(customer) {\r\n        return CustomerModel.create(customer);\r\n        // customer.save(function(err, customer){\r\n        //     if(err)\r\n        //         return console.error(err);\r\n        // });\r\n    },\r\n    updateCustomer(customerId, customerUpdate) {\r\n        return new Promise((resolve, reject) => {\r\n            CustomerModel.findOneAndUpdate({ id : customerId }, customerUpdate, { upsert: true, new: true }, (err, obj) => {\r\n            if (err){\r\n                console.log(\"Error in update customer\");\r\n                reject(err);\r\n            }\r\n            resolve(obj);\r\n            });\r\n        });\r\n    },\r\n    changePassword(customerId, currentPassword, newPassword) {\r\n        return new Promise((resolve, reject) => {\r\n            CustomerRepository.findCustomerById(customerId)\r\n            .then(customer => {\r\n                /////////////////\r\n              console.log(customer);\r\n              if(customer){\r\n                Crypto.isMatch(currentPassword, customer.password)\r\n                .then(match => {\r\n                  console.log(match);\r\n                    if(match) {\r\n                        Crypto.encrypt(user.password).then((value) => {\r\n                            user.password = value;\r\n                            // next();\r\n                            user.save(function(err){\r\n                                if(err){\r\n                                    console.log(err + \"error saving pass\");\r\n                                    reject(err);\r\n                                }\r\n                                else{\r\n                                    console.log(\"success saving pass\");\r\n                                    resolve(customer);\r\n                                }\r\n                            });\r\n                        });\r\n                    } \r\n                    else { \r\n                      console.log(\"wrong password\"); \r\n                      reject(match);\r\n                    }\r\n                })}\r\n              else {\r\n                  console.log(customer);\r\n                reject(customer);\r\n              }\r\n            })\r\n            //////////////////\r\n            .catch(err => {\r\n              console.log(err);\r\n              reject(err);\r\n           });\r\n        });\r\n    },\r\n    addCustomerCredit(customerId, credit) {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(\"in addCustomerCredit\");\r\n            this.findCustomerById(customerId)\r\n            .then(customer =>{\r\n                if(customer){\r\n                    console.log(customer + \"true\");\r\n                    customer.credits.push(credit);\r\n                    customer.save(function(err){\r\n                        if(err){\r\n                            console.log(err + \"error\");\r\n                            reject(err);\r\n                        }\r\n                        else{\r\n                            console.log(\"success\");\r\n                            resolve(customer);\r\n                        }\r\n                    });\r\n                }\r\n                else{\r\n                    console.log(customer + \"false\");\r\n                    reject(customer);\r\n                }\r\n            })\r\n            .catch(err => reject(err));\r\n        });\r\n    },\r\n\r\n    editCustomerCredit(customerId, creditUpdate) {\r\n        // return new Promise((resolve, reject) => {\r\n        //     CustomerModel.findOneAndUpdate({ id : customerId }, creditUpdate, { upsert: true, new: true }, (err, obj) => {\r\n        //     if (err){\r\n        //         console.log(err);\r\n        //         reject(err);\r\n        //     }\r\n        //     resolve(obj);\r\n        //     });\r\n        // });\r\n        return new Promise((resolve, reject) => {\r\n            CustomerModel.update({id: customerId, 'credits._id': creditUpdate._id},\r\n            {$set: { \"credits.$\": creditUpdate }})\r\n            .then(credit => resolve(credit))\r\n            .catch(err => reject(err));\r\n        });\r\n    },\r\n\r\n    removeCustomer(customer){\r\n        customer.remove();\r\n    },\r\n\r\n    findCustomerById(customerId) {\r\n        // return new Promise((resolve, reject) => {\r\n        //     CustomerModel.findOne({Id: id}, (err, customer) => {\r\n        //         if (err) reject(err);\r\n        //         else resolve(customer);\r\n        //     });\r\n        // });\r\n        // console.log(\"id number: \"+customerId);\r\n        return new Promise((resolve, reject) => {\r\n            CustomerModel.findOne({id : customerId}).populate('clubs')\r\n            .then(customer => resolve(customer))\r\n            .catch(err => reject(err));\r\n        });\r\n    },\r\n     findCustomerByObjectId(id) {\r\n        return new Promise((resolve, reject) => {\r\n            CustomerModel.findOne({_id: id}, (err, customer) => {\r\n                if (err) reject(err);\r\n                else resolve(customer);\r\n            });\r\n        });\r\n    },\r\n    findCustomerByEmail(email) {\r\n        // return new Promise((resolve, reject) => {\r\n        //     CustomerModel.findOne({email: email}, (err, customer) => {\r\n        //         if(err) reject(err);\r\n        //         else resolve(customer);\r\n            // });\r\n        return new Promise((resolve, reject) => {\r\n            CustomerModel.findOne({email : email}).populate('clubs')\r\n            .then(customer => resolve(customer))\r\n            .catch(err => reject(err));\r\n            });\r\n        \r\n    },\r\n    removeClubByClubId(customer, clubId){\r\n        return new Promise((resolve, reject) => {\r\n            customer.clubs = customer.clubs.filter(club =>{\r\n                return club.id != clubId;\r\n            })\r\n            CustomerModel.findOneAndUpdate({ id : customer.id }, customer, { upsert: true, new: true }, (err, obj) => {\r\n                if (err){\r\n                    console.log(err);\r\n                    reject(err);\r\n                }\r\n                resolve(obj);\r\n                });\r\n            });\r\n            \r\n    },\r\n    changePrivateInfo(custId, index, newItem)\r\n    {\r\n        this.findCustomerById(custId)\r\n        .then(customer => {\r\n            if(customer)\r\n            {\r\n                customer[index] = newItem;\r\n                customer.save();\r\n            }\r\n            else { console.log(\"Customer not found\"); }\r\n        })\r\n        .catch(err => { console.log(err); });\r\n     },\r\n     addCreditOrReceipt(customerId, item, prop)\r\n     {\r\n         this.findCustomerById(customerId)\r\n         .then(customer => {\r\n             if(customer)\r\n             {\r\n                let exists = this.findCreditOrReceipt(customer, item.id, prop); //customer.Credits.find(isCreditExists => isCreditExists.Id == credit.Id);\r\n                if(!exists)\r\n                {\r\n                    customer[prop].push(item);\r\n                    customer.save();\r\n                }\r\n                else { console.log(\"Credit is exists\"); }\r\n             }\r\n         })\r\n         .catch(err => { console.log(err); });\r\n     },\r\n     removeCreditOrReceipt(customerId, creditId, prop)\r\n     {\r\n        return new Promise((resolve, reject) => {\r\n            this.findCustomerById(customerId)\r\n            .then(customer =>{\r\n                if(customer){\r\n                    console.log(customer + \"true\");\r\n                    let index = this.getIndexOfCreditOrReceipt(customer, creditId, prop)\r\n\t\t\t\t\tcustomer[prop].splice(index, 1);\r\n\t\t\t\t\tcustomer.save(function(err){\r\n                        if(err){\r\n                            console.log(err + \"error\");\r\n                            reject(err);\r\n                        }\r\n                        else{\r\n                            console.log(\"success\");\r\n                            resolve(customer);\r\n                        }\r\n                    });\r\n                }\r\n                else{\r\n                    console.log(customer + \"false\");\r\n                    reject(customer);\r\n                }\r\n            })\r\n            .catch(err => reject(err));\r\n        });\r\n     },\r\n     findCreditOrReceipt(customer, creditId, prop)\r\n     {\r\n        return customer[prop].find(credit => credit.id == creditId);\r\n     },\r\n     getIndexOfCreditOrReceipt(customer, creditId, prop)\r\n     {\r\n        let index =0;\r\n        let i = 0;\r\n        customer[prop].forEach(function(credit) {\r\n            if(credit.id == creditId)\r\n                index = i;\r\n            i++;\r\n        });\r\n        return index;\r\n     },\r\n     changeCreditOrReceiptInfo(customerId, creditId, itemIndex, newItem, prop)\r\n     {\r\n        this.findCustomerById(customerId)\r\n        .then(customer => {\r\n            if(customer)\r\n            {\r\n                let credit = this.findCreditOrReceipt(customer, creditId, prop)\r\n                if(credit){\r\n                    credit[itemIndex] = newItem;\r\n                    customer.save();\r\n                }\r\n                else{\r\n                    console.log(\"Credit wasnt found\");\r\n                }\r\n\r\n            }\r\n            else { console.log(\"Customer not found\"); }\r\n        })\r\n        .catch(err => { console.log(err); });\r\n     },\r\n    addItemCreditOrReceipt(customerId, creditId, newItem, prop)\r\n     {\r\n        this.findCustomerById(customerId)\r\n        .then(customer => {\r\n            if(customer)\r\n            {\r\n                let credit = this.findCreditOrReceipt(customer, creditId, prop)\r\n                if(credit){\r\n                    credit.items.push(newItem);\r\n                    customer.save();\r\n                }\r\n                else{\r\n                    console.log(\"Credit wasnt found\");\r\n                }\r\n\r\n            }\r\n            else { console.log(\"Customer not found\"); }\r\n        })\r\n        .catch(err => { console.log(err); });\r\n     },\r\n     changeItemsCreditOrReceipt(customerId, creditId, newItem, oldItem, prop)\r\n     {\r\n        this.findCustomerById(customerId)\r\n        .then(customer => {\r\n            if(customer)\r\n            {\r\n                let i = this.getIndexOfCreditOrReceipt(customer, creditId, prop);\r\n                let credit = this.findCreditOrReceipt(customer, creditId, prop)\r\n                if(credit != -1){\r\n                    let index = credit.items.indexOf(oldItem);\r\n                    // customer.Credits[i].items[index] = newItem;\r\n                    customer.Credits[i].items.splice(index, 1);\r\n                    customer.Credits[i].items.push(newItem);\r\n                    customer.save();\r\n                }\r\n                else { console.log(\"Credit wasnt found\"); }\r\n            }\r\n            else { console.log(\"Customer not found\"); }\r\n        })\r\n        .catch(err => { console.log(err); });\r\n     },\r\n     removeItemsCreditOrReceipt(customerId, creditId, oldItem, prop)\r\n     {\r\n        this.findCustomerById(customerId)\r\n        .then(customer => {\r\n            if(customer)\r\n            {\r\n                let i = this.getIndexOfCreditOrReceipt(customer, creditId, prop);\r\n                let credit = this.findCreditOrReceipt(customer, creditId, prop)\r\n                if(credit){\r\n                    let index = credit.items.indexOf(oldItem);\r\n                    customer[prop][i].items.splice(index, 1);\r\n                    customer.save();\r\n                }\r\n                else{ console.log(\"Credit wasnt found\"); }\r\n            }\r\n            else { console.log(\"Customer not found\"); }\r\n        })\r\n        .catch(err => { console.log(err); });\r\n     }\r\n}\r\n"]}